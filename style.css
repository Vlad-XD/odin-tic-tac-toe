
:root {
  --player1-color: red;
  --button-color: red;
  --player2-color: blue;
  --grid-width: 5rem;
  --grid-gap-size: 0.15rem;
  --player-hover-color: grey;
  --grid-bg-color: lightgrey;
  --gap-color: rgba(0, 0, 0, 0.377);
  --page-bg-color: white;
}

html {
  display: flex;
  min-height: 100%;
  min-width: 100%;
  background-color: var(--page-bg-color);
}

body {
  display: flex;
  flex-direction: column;
  align-items: center;
  flex-grow: 1;
 
}

/* Game Header Bar */

div.game-header {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  margin-top: 3rem;
  margin-bottom: 3rem;
}

div.game-header button {
  padding: 0.25rem;
  color: white;
  border-radius: 1rem;
  height: 2.5rem;
  width: 10rem;
  text-align: center; 
  font-weight: bold;
  font-size: 1.5rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

div.game-header button.player1 {
  margin-right: 5rem;
  background-color: var(--player1-color);
}

div.game-header button.player2 {
  margin-left: 5rem;
  background-color: var(--player2-color);
}

div.game-header div.score-container {
  display: flex;
  flex-direction: row;
  position: relative;
  width: 5rem;
}

div.game-header div.score-container div.score {
  width: 2.5rem;
  color: white;
  font-size: 2rem;
  font-weight: bold;
  text-align: center;
}

div.game-header div.score-container div.score.player1 {
  background-color: var(--player1-color);
}

div.game-header div.score-container div.score.player2 {
  background-color: var(--player2-color);
}

div.game-header div.score-container div.score-label {
  position: absolute;
  font-weight: bold;
  border: solid 0.1rem black;
  top: -1.25rem;
  width: 5rem;
  text-align: center;
}



/* Game Grid */

div.grid-container {
  display: grid;
  background-color: var(--gap-color);
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;
  gap: var(--grid-gap-size);
}

div.grid-child {
  width: var(--grid-width);
  height: var(--grid-width);
  background-color: var(--grid-bg-color);
  position: relative;
}

/* Aligning Player marks and making them not visible.
    Idea: player marks are already in all of our grids
          and we update their visual properites to indicate
          players making a move or grid being selected */

div.grid-child svg.player1{
  width: var(--grid-width);
  height: auto;
  position: absolute;
  opacity: 0;
}

div.grid-child svg.player2{
  width: calc(0.8*var(--grid-width));
  height: auto;
  position: absolute;
  top: calc(0.1*var(--grid-width));
  right: calc(0.1*var(--grid-width));
  opacity: 0;
}

/* The [data-selected] attribute of the grid container will be 
   updated in our code to indicate which player is selected
   i.e., whose turn it is. We will utilize this to correctly
   display what mark will be shown if a grid is selected. */

   /* Hovering preview for player moves */
   div.grid-container[data-selected="player1"] div.grid-child[data-player = "none"]:hover svg.player1{
    color: var(--player-hover-color);
    opacity: 50;
    transition: opacity 0.15s ease-in;
   }

   div.grid-container[data-selected="player2"] div.grid-child[data-player = "none"]:hover svg.player2{
    color: var(--player-hover-color);
    opacity: 50;
    transition: opacity 0.15s ease-in;
   }

    /* only show cursor when grid-container is active (i.e., data-selected === "player1 or player2") */
   div.grid-container[data-selected*="player"] div.grid-child:hover {
    cursor: pointer;
   }

/* grids that have already been played (data-player = "none") will not have  
   a pointer cursor*/
   div.grid-child[data-player = "player1"]:hover svg,
   div.grid-child[data-player = "player2"]:hover svg{
    cursor: default;
   }

  /* Showing selected grids */
  div.grid-child[data-player = "player1"] svg.player1{
    color: var(--player1-color);
    opacity: 100;
   }

   div.grid-child[data-player = "player2"] svg.player2{
    color: var(--player2-color);
    opacity: 100;
   }

   /* utilizing row and columns to organize grid-children in grid */
   div.grid-child[data-row = "0"] {
    grid-row: 1 / 2;
   }

   div.grid-child[data-column = "0"] {
    grid-column: 1 / 2;
   }

   div.grid-child[data-row = "1"] {
    grid-row: 2 / 3;
   }

   div.grid-child[data-column = "1"] {
    grid-column: 2 / 3;
   }

   div.grid-child[data-row = "2"] {
    grid-row: 3 / 4;
   }

   div.grid-child[data-column = "2"] {
    grid-column: 3 / 4;
   }

   div.end-screen {
    /* We want end screen to cover whole grid and be on top */
    grid-column: 1 / 4;
    grid-row: 1 / 4;
    z-index: 2;
    background-color: rgba(0, 0, 0, 0.829);
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: calc(var(--grid-width)*3 + 2*var(--grid-gap-size));
    max-height: calc(var(--grid-width)*3 + 2*var(--grid-gap-size));
    visibility: hidden;
    opacity: 0; /* opacity is used for transition animation because transition does not work w/ visibility*/
    transition: opacity 1s ease-in-out;
  }

   div.end-screen p.end-message {
    font-size: 1.75rem;
    font-weight: bold;
    flex-grow: 0;
    max-width: 80%;
    height: 30%;
    text-wrap: wrap;
    text-align: center;
    margin-top: 20%;
    margin-bottom: 20%;
   }

   div.end-screen button.play-again {
    background-color: var(--button-color);
    color: white;
    font-size: 1.25rem;
    font-weight: bold;
    border-radius: 1rem;
    padding: 0.5rem 1rem;
   }

   div.end-screen button.play-again:hover {
    cursor: pointer;
    font-size: 1.5rem;
    transition: font-size 0.10s ease-in-out;
    font-weight: bold;
    border-radius: 1rem;
    padding: 0.5rem 1rem;
   }